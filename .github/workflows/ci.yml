name: RustBus CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      run: rustup update stable && rustup default stable
    - name: Clean Cargo Cache
      run: cargo clean
    - name: Build
      run: cargo build --verbose
    - name: Run Tests
      run: cargo test --verbose
      
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: rustbus
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: clippy
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libpq-dev libzmq3-dev
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Apply database schema
        run: psql -h localhost -U user -d rustbus -f schema.sql
        env:
          PGPASSWORD: pass
      - name: Run clippy
        run: cargo clippy --all-targets --all-features # Relaxed -D warnings
      - name: Run tests
        env:
          DATABASE_URL: postgres://user:pass@localhost:5432/rustbus
        run: cargo test -- --nocapture
      - name: Build
        run: cargo build --release

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t rustbus:latest .
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push Docker image
        run: docker push rustbus:latest
      # Uncomment for Fly.io deployment
      # - name: Deploy to Fly.io
      #   uses: superfly/flyctl-actions@1.4
      #   env:
      #     FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      #   with:
      #     args: deploy
